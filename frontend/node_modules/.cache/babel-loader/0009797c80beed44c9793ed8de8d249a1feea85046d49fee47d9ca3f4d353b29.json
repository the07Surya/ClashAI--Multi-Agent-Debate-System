{"ast":null,"code":"// import React, { useState , useEffect } from 'react';\n// import { motion, AnimatePresence } from 'framer-motion';\n// import { \n//   LightBulbIcon, \n//   ShieldExclamationIcon, \n//   CogIcon, \n//   ScaleIcon,\n//   ChevronDownIcon,\n//   ChevronUpIcon,\n//   UserIcon\n// } from '@heroicons/react/24/outline';\n\n// const getAgentConfig = (agentType) => {\n//   const configs = {\n//     innovator: {\n//       icon: LightBulbIcon,\n//       title: 'Alex Chen',\n//       subtitle: 'The Innovator',\n//       description: 'Visionary strategist pushing breakthrough solutions',\n//       personality: '🚀 Optimistic • Forward-thinking • Disruptive',\n//       colors: {\n//         primary: 'text-emerald-400',\n//         bg: 'bg-gradient-to-br from-emerald-900/40 via-green-900/40 to-teal-900/40',\n//         border: 'border-emerald-500/30',\n//         accent: 'bg-emerald-500/20',\n//         glow: 'shadow-emerald-500/30',\n//         particle: 'bg-emerald-400'\n//       }\n//     },\n//     skeptic: {\n//       icon: ShieldExclamationIcon,\n//       title: 'Dr. Sarah Reeves',\n//       subtitle: 'The Skeptic',\n//       description: 'Risk analyst cutting through hype with precision',\n//       personality: '🔍 Analytical • Evidence-based • Critical',\n//       colors: {\n//         primary: 'text-red-400',\n//         bg: 'bg-gradient-to-br from-red-900/40 via-pink-900/40 to-rose-900/40',\n//         border: 'border-red-500/30',\n//         accent: 'bg-red-500/20',\n//         glow: 'shadow-red-500/30',\n//         particle: 'bg-red-400'\n//       }\n//     },\n//     engineer: {\n//       icon: CogIcon,\n//       title: 'Marcus Torres',\n//       subtitle: 'The Engineer',\n//       description: 'Systems architect bridging vision with reality',\n//       personality: '⚙️ Pragmatic • Technical • Solution-focused',\n//       colors: {\n//         primary: 'text-blue-400',\n//         bg: 'bg-gradient-to-br from-blue-900/40 via-cyan-900/40 to-sky-900/40',\n//         border: 'border-blue-500/30',\n//         accent: 'bg-blue-500/20',\n//         glow: 'shadow-blue-500/30',\n//         particle: 'bg-blue-400'\n//       }\n//     },\n//     ethicist: {\n//       icon: ScaleIcon,\n//       title: 'Dr. Amara Okafor',\n//       subtitle: 'The Ethicist',\n//       description: 'Moral philosopher examining human impact',\n//       personality: '⚖️ Principled • Human-centered • Thoughtful',\n//       colors: {\n//         primary: 'text-purple-400',\n//         bg: 'bg-gradient-to-br from-purple-900/40 via-indigo-900/40 to-violet-900/40',\n//         border: 'border-purple-500/30',\n//         accent: 'bg-purple-500/20',\n//         glow: 'shadow-purple-500/30',\n//         particle: 'bg-purple-400'\n//       }\n//     }\n//   };\n//   return configs[agentType] || configs.innovator;\n// };\n\n// const AgentPanel = ({ agent, messages = [], currentRound = 1, isActive = false, debateStatus = 'idle' }) => {\n//   const [expandedRounds, setExpandedRounds] = useState(new Set());\n//   const config = getAgentConfig(agent);\n//   const Icon = config.icon;\n\n//   useEffect(() => {\n//     // Automatically expand the current round when it changes\n//     if (currentRound > 0) {\n//       setExpandedRounds(prev => new Set(prev).add(currentRound));\n//     }\n//   }, [currentRound]);\n\n//   // Filter and sort messages for this agent\n//   const agentMessages = messages\n//     .filter(msg => msg.data && msg.data.role === agent)\n//     .sort((a, b) => (a.data.round || 0) - (b.data.round || 0));\n\n//   // Group messages by round\n//   const messagesByRound = agentMessages.reduce((acc, msg) => {\n//     const round = msg.data.round || 1;\n//     if (!acc[round]) acc[round] = [];\n//     acc[round].push(msg);\n//     return acc;\n//   }, {});\n\n//   // --- FIX START: Correctly determine all rounds to display ---\n//   // This ensures that placeholders are shown for rounds where the agent hasn't responded yet.\n//   const roundsWithMessages = Object.keys(messagesByRound).map(Number);\n//   const allPossibleRounds = Array.from({ length: currentRound > 0 ? currentRound : 0 }, (_, i) => i + 1);\n//   const allRounds = [...new Set([\n//     ...roundsWithMessages,\n//     ...allPossibleRounds\n//   ])].sort((a, b) => b - a); // Sort in descending order (latest first)\n//   // --- FIX END ---\n\n//   const hasMessages = agentMessages.length > 0;\n\n//   const toggleRoundExpansion = (round) => {\n//     const newExpanded = new Set(expandedRounds);\n//     if (newExpanded.has(round)) {\n//       newExpanded.delete(round);\n//     } else {\n//       newExpanded.add(round);\n//     }\n//     setExpandedRounds(newExpanded);\n//   };\n\n//   const isWaitingForResponse = debateStatus === 'debating' && !messagesByRound[currentRound] && currentRound > 0;\n\n//   return (\n//     <motion.div \n//       initial={{ opacity: 0, scale: 0.9, rotateX: -10 }}\n//       animate={{ opacity: 1, scale: 1, rotateX: 0 }}\n//       whileHover={{ y: -5, scale: 1.02 }}\n//       className={`\n//         ${config.colors.bg} \n//         backdrop-blur-xl border-2 ${config.colors.border} rounded-3xl p-6 h-full min-h-[600px] max-h-[800px]\n//         ${isActive ? `${config.colors.glow} shadow-2xl` : 'shadow-xl'}\n//         transition-all duration-500 relative overflow-hidden flex flex-col\n//       `}\n//     >\n//       {/* Particle Effects */}\n//       <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n//         {isActive && [...Array(15)].map((_, i) => (\n//           <motion.div\n//             key={i}\n//             className={`absolute w-1 h-1 ${config.colors.particle}/60 rounded-full`}\n//             initial={{ \n//               x: Math.random() * 300,\n//               y: Math.random() * 400,\n//               opacity: 0 \n//             }}\n//             animate={{ \n//               y: [null, -20],\n//               opacity: [0, 1, 0],\n//               scale: [0, 1, 0]\n//             }}\n//             transition={{\n//               duration: Math.random() * 2 + 1,\n//               repeat: Infinity,\n//               delay: Math.random() * 2,\n//               ease: \"easeOut\"\n//             }}\n//           />\n//         ))}\n//       </div>\n\n//       {/* Neural Activity Indicator */}\n//       {isActive && (\n//         <div className=\"absolute top-4 right-4 z-20\">\n//           <motion.div\n//             className={`${config.colors.accent} backdrop-blur-sm rounded-2xl px-4 py-2 border ${config.colors.border}`}\n//             animate={{ \n//               scale: [1, 1.1, 1],\n//               boxShadow: [`0 0 20px ${config.colors.glow.split('/')[0]}`, `0 0 40px ${config.colors.glow.split('/')[0]}`, `0 0 20px ${config.colors.glow.split('/')[0]}`]\n//             }}\n//             transition={{ duration: 1, repeat: Infinity }}\n//           >\n//             <div className=\"flex items-center space-x-2\">\n//               <motion.div \n//                 className={`w-2 h-2 ${config.colors.particle} rounded-full`}\n//                 animate={{ scale: [1, 1.5, 1] }}\n//                 transition={{ duration: 0.5, repeat: Infinity }}\n//               />\n//               <span className={`text-xs font-bold ${config.colors.primary}`}>\n//                 Neural Active\n//               </span>\n//             </div>\n//           </motion.div>\n//         </div>\n//       )}\n\n//       {/* Agent Header */}\n//       <div className=\"flex items-start space-x-4 mb-6 flex-shrink-0 relative z-10\">\n//         <motion.div\n//           className={`${config.colors.accent} backdrop-blur-sm p-4 rounded-2xl border ${config.colors.border}`}\n//           animate={isActive ? { \n//             rotate: [0, 5, -5, 0],\n//             scale: [1, 1.05, 1]\n//           } : {}}\n//           transition={{ duration: 2, repeat: Infinity }}\n//         >\n//           <Icon className={`h-8 w-8 ${config.colors.primary}`} />\n//         </motion.div>\n\n//         <div className=\"flex-1 min-w-0\">\n//           <h3 className={`text-2xl font-black ${config.colors.primary} mb-1`}>\n//             {config.title}\n//           </h3>\n//           <p className=\"text-slate-300 font-bold text-sm mb-2\">\n//             {config.subtitle}\n//           </p>\n//           <p className=\"text-slate-400 text-xs leading-tight mb-2\">\n//             {config.description}\n//           </p>\n//           <p className=\"text-xs text-slate-500 font-medium\">\n//             {config.personality}\n//           </p>\n//         </div>\n//       </div>\n\n//       {/* Messages Container */}\n//       <div className=\"flex-1 overflow-y-auto space-y-4 custom-scrollbar\">\n//         <AnimatePresence>\n//           {allRounds.length === 0 ? (\n//             <motion.div \n//               initial={{ opacity: 0 }}\n//               animate={{ opacity: 1 }}\n//               className=\"text-center py-12 flex flex-col items-center justify-center h-full\"\n//             >\n//               <motion.div\n//                 animate={{ scale: [1, 1.1, 1], opacity: [0.5, 1, 0.5] }}\n//                 transition={{ duration: 2, repeat: Infinity }}\n//                 className=\"mb-4\"\n//               >\n//                 <UserIcon className=\"h-16 w-16 mx-auto text-slate-600\" />\n//               </motion.div>\n//               <p className=\"text-slate-400 font-medium\">\n//                 Neural pathways initializing...\n//               </p>\n//             </motion.div>\n//           ) : (\n//             allRounds.map(round => (\n//               <RoundSection\n//                 key={round}\n//                 round={round}\n//                 messages={messagesByRound[round] || []}\n//                 isExpanded={expandedRounds.has(round)}\n//                 onToggleExpansion={toggleRoundExpansion}\n//                 config={config}\n//                 isCurrentRound={round === currentRound}\n//                 isWaitingForRound={isWaitingForResponse && round === currentRound}\n//               />\n//             ))\n//           )}\n//         </AnimatePresence>\n//       </div>\n\n//       {/* Agent Stats Footer */}\n//       <motion.div \n//         className=\"mt-6 pt-4 border-t border-slate-600/30 flex-shrink-0\"\n//         initial={{ opacity: 0 }}\n//         animate={{ opacity: 1 }}\n//         transition={{ delay: 0.5 }}\n//       >\n//         <div className=\"flex justify-between items-center text-xs\">\n//           <div className=\"flex items-center space-x-4\">\n//             <span className=\"text-slate-400\">\n//               <span className={`${config.colors.primary} font-bold`}>{agentMessages.length}</span> responses\n//             </span>\n//             <span className=\"text-slate-400\">\n//               <span className={`${config.colors.primary} font-bold`}>{allRounds.length}</span> rounds\n//             </span>\n//           </div>\n//           <div className=\"flex items-center space-x-2\">\n//             <div className={`w-2 h-2 ${currentRound > 0 ? config.colors.particle : 'bg-slate-600'} rounded-full`} />\n//             <span className=\"text-slate-400 font-medium\">\n//               Round <span className={config.colors.primary}>{currentRound}</span>\n//             </span>\n//           </div>\n//         </div>\n//       </motion.div>\n//     </motion.div>\n//   );\n// };\n\n// const RoundSection = ({ round, messages, isExpanded, onToggleExpansion, config, isCurrentRound, isWaitingForRound }) => {\n//   const hasMessages = messages && messages.length > 0;\n\n//   return (\n//     <motion.div \n//       className=\"border border-slate-600/30 rounded-2xl overflow-hidden backdrop-blur-sm\"\n//       whileHover={{ scale: 1.01 }}\n//       transition={{ type: \"spring\", stiffness: 300 }}\n//     >\n//       {/* Round Header */}\n//       <motion.button\n//         onClick={() => onToggleExpansion(round)}\n//         className={`w-full px-6 py-4 flex items-center justify-between transition-all duration-300 ${\n//           isCurrentRound \n//             ? `${config.colors.accent} ${config.colors.primary} font-bold border-b ${config.colors.border}` \n//             : 'bg-slate-800/30 text-slate-300 hover:bg-slate-700/50'\n//         }`}\n//         whileHover={{ backgroundColor: isCurrentRound ? undefined : 'rgba(51, 65, 85, 0.7)' }}\n//       >\n//         <div className=\"flex items-center space-x-4\">\n//           <motion.div\n//             className={`w-3 h-3 rounded-full ${isCurrentRound ? config.colors.particle : 'bg-slate-500'}`}\n//             animate={isCurrentRound ? { scale: [1, 1.3, 1] } : {}}\n//             transition={{ duration: 1, repeat: Infinity }}\n//           />\n//           <span className=\"font-bold\">Round {round}</span>\n//           {isCurrentRound && (\n//             <span className=\"text-xs bg-white/20 px-2 py-1 rounded-full\">\n//               Active\n//             </span>\n//           )}\n//           {isWaitingForRound && (\n//             <motion.span \n//               className=\"text-xs text-orange-400 font-medium\"\n//               animate={{ opacity: [0.5, 1, 0.5] }}\n//               transition={{ duration: 1, repeat: Infinity }}\n//             >\n//               Processing...\n//             </motion.span>\n//           )}\n//         </div>\n\n//         <div className=\"flex items-center space-x-3\">\n//           {hasMessages && (\n//             <span className=\"text-xs opacity-70 bg-slate-700/50 px-2 py-1 rounded-full\">\n//               {messages.length} response{messages.length !== 1 ? 's' : ''}\n//             </span>\n//           )}\n//           <motion.div\n//             animate={{ rotate: isExpanded ? 180 : 0 }}\n//             transition={{ duration: 0.2 }}\n//           >\n//             <ChevronDownIcon className=\"h-5 w-5\" />\n//           </motion.div>\n//         </div>\n//       </motion.button>\n\n//       {/* Round Content */}\n//       <AnimatePresence>\n//         {isExpanded && (\n//           <motion.div\n//             initial={{ height: 0, opacity: 0 }}\n//             animate={{ height: 'auto', opacity: 1 }}\n//             exit={{ height: 0, opacity: 0 }}\n//             transition={{ duration: 0.3, ease: \"easeInOut\" }}\n//             className=\"overflow-hidden\"\n//           >\n//             <div className=\"p-6 bg-slate-800/20 backdrop-blur-sm space-y-4\">\n//               {isWaitingForRound ? (\n//                 <div className=\"text-center py-8\">\n//                   <motion.div\n//                     animate={{ rotate: 360 }}\n//                     transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n//                     className=\"w-8 h-8 border-2 border-current border-t-transparent rounded-full mx-auto mb-3 opacity-50\"\n//                   />\n//                   <p className=\"text-sm text-slate-400\">Neural processing in progress...</p>\n//                 </div>\n//               ) : !hasMessages ? (\n//                 <div className=\"text-center py-8\">\n//                   <p className=\"text-sm text-slate-500 italic\">No neural activity recorded</p>\n//                 </div>\n//               ) : (\n//                 messages.map((message, index) => (\n//                   <motion.div\n//                     key={message.id || `${round}-${index}`}\n//                     initial={{ opacity: 0, y: 20, scale: 0.95 }}\n//                     animate={{ opacity: 1, y: 0, scale: 1 }}\n//                     transition={{ delay: index * 0.1, type: \"spring\" }}\n//                     className=\"bg-slate-900/50 backdrop-blur-sm rounded-xl p-4 border border-slate-600/20 hover:border-slate-500/30 transition-all duration-300\"\n//                   >\n//                     <div className=\"flex justify-between items-center mb-3\">\n//                       <span className=\"text-xs text-slate-400 font-medium\">\n//                         {new Date(message.data.timestamp).toLocaleTimeString([], {\n//                           hour: '2-digit', \n//                           minute: '2-digit',\n//                           second: '2-digit'\n//                         })}\n//                       </span>\n//                       <div className=\"flex items-center space-x-2\">\n//                         <div className={`w-2 h-2 ${config.colors.particle} rounded-full animate-pulse`} />\n//                         <span className={`text-xs font-bold ${config.colors.primary} bg-slate-800/50 px-2 py-1 rounded-full`}>\n//                           R{message.data.round}\n//                         </span>\n//                       </div>\n//                     </div>\n//                     <p className=\"text-slate-200 leading-relaxed font-medium\">\n//                       {message.data.content}\n//                     </p>\n//                   </motion.div>\n//                 ))\n//               )}\n//             </div>\n//           </motion.div>\n//         )}\n//       </AnimatePresence>\n//     </motion.div>\n//   );\n// };\n\n// export default AgentPanel;","map":{"version":3,"names":[],"sources":["C:/Users/SuryaPratapRout/OneDrive - GyanSys Inc/Desktop/Apex/Chimera-Debate/Chimera-Clue/frontend/src/components/AgentPanel.jsx"],"sourcesContent":["// import React, { useState , useEffect } from 'react';\r\n// import { motion, AnimatePresence } from 'framer-motion';\r\n// import { \r\n//   LightBulbIcon, \r\n//   ShieldExclamationIcon, \r\n//   CogIcon, \r\n//   ScaleIcon,\r\n//   ChevronDownIcon,\r\n//   ChevronUpIcon,\r\n//   UserIcon\r\n// } from '@heroicons/react/24/outline';\r\n\r\n// const getAgentConfig = (agentType) => {\r\n//   const configs = {\r\n//     innovator: {\r\n//       icon: LightBulbIcon,\r\n//       title: 'Alex Chen',\r\n//       subtitle: 'The Innovator',\r\n//       description: 'Visionary strategist pushing breakthrough solutions',\r\n//       personality: '🚀 Optimistic • Forward-thinking • Disruptive',\r\n//       colors: {\r\n//         primary: 'text-emerald-400',\r\n//         bg: 'bg-gradient-to-br from-emerald-900/40 via-green-900/40 to-teal-900/40',\r\n//         border: 'border-emerald-500/30',\r\n//         accent: 'bg-emerald-500/20',\r\n//         glow: 'shadow-emerald-500/30',\r\n//         particle: 'bg-emerald-400'\r\n//       }\r\n//     },\r\n//     skeptic: {\r\n//       icon: ShieldExclamationIcon,\r\n//       title: 'Dr. Sarah Reeves',\r\n//       subtitle: 'The Skeptic',\r\n//       description: 'Risk analyst cutting through hype with precision',\r\n//       personality: '🔍 Analytical • Evidence-based • Critical',\r\n//       colors: {\r\n//         primary: 'text-red-400',\r\n//         bg: 'bg-gradient-to-br from-red-900/40 via-pink-900/40 to-rose-900/40',\r\n//         border: 'border-red-500/30',\r\n//         accent: 'bg-red-500/20',\r\n//         glow: 'shadow-red-500/30',\r\n//         particle: 'bg-red-400'\r\n//       }\r\n//     },\r\n//     engineer: {\r\n//       icon: CogIcon,\r\n//       title: 'Marcus Torres',\r\n//       subtitle: 'The Engineer',\r\n//       description: 'Systems architect bridging vision with reality',\r\n//       personality: '⚙️ Pragmatic • Technical • Solution-focused',\r\n//       colors: {\r\n//         primary: 'text-blue-400',\r\n//         bg: 'bg-gradient-to-br from-blue-900/40 via-cyan-900/40 to-sky-900/40',\r\n//         border: 'border-blue-500/30',\r\n//         accent: 'bg-blue-500/20',\r\n//         glow: 'shadow-blue-500/30',\r\n//         particle: 'bg-blue-400'\r\n//       }\r\n//     },\r\n//     ethicist: {\r\n//       icon: ScaleIcon,\r\n//       title: 'Dr. Amara Okafor',\r\n//       subtitle: 'The Ethicist',\r\n//       description: 'Moral philosopher examining human impact',\r\n//       personality: '⚖️ Principled • Human-centered • Thoughtful',\r\n//       colors: {\r\n//         primary: 'text-purple-400',\r\n//         bg: 'bg-gradient-to-br from-purple-900/40 via-indigo-900/40 to-violet-900/40',\r\n//         border: 'border-purple-500/30',\r\n//         accent: 'bg-purple-500/20',\r\n//         glow: 'shadow-purple-500/30',\r\n//         particle: 'bg-purple-400'\r\n//       }\r\n//     }\r\n//   };\r\n//   return configs[agentType] || configs.innovator;\r\n// };\r\n\r\n// const AgentPanel = ({ agent, messages = [], currentRound = 1, isActive = false, debateStatus = 'idle' }) => {\r\n//   const [expandedRounds, setExpandedRounds] = useState(new Set());\r\n//   const config = getAgentConfig(agent);\r\n//   const Icon = config.icon;\r\n\r\n//   useEffect(() => {\r\n//     // Automatically expand the current round when it changes\r\n//     if (currentRound > 0) {\r\n//       setExpandedRounds(prev => new Set(prev).add(currentRound));\r\n//     }\r\n//   }, [currentRound]);\r\n  \r\n//   // Filter and sort messages for this agent\r\n//   const agentMessages = messages\r\n//     .filter(msg => msg.data && msg.data.role === agent)\r\n//     .sort((a, b) => (a.data.round || 0) - (b.data.round || 0));\r\n\r\n//   // Group messages by round\r\n//   const messagesByRound = agentMessages.reduce((acc, msg) => {\r\n//     const round = msg.data.round || 1;\r\n//     if (!acc[round]) acc[round] = [];\r\n//     acc[round].push(msg);\r\n//     return acc;\r\n//   }, {});\r\n  \r\n//   // --- FIX START: Correctly determine all rounds to display ---\r\n//   // This ensures that placeholders are shown for rounds where the agent hasn't responded yet.\r\n//   const roundsWithMessages = Object.keys(messagesByRound).map(Number);\r\n//   const allPossibleRounds = Array.from({ length: currentRound > 0 ? currentRound : 0 }, (_, i) => i + 1);\r\n//   const allRounds = [...new Set([\r\n//     ...roundsWithMessages,\r\n//     ...allPossibleRounds\r\n//   ])].sort((a, b) => b - a); // Sort in descending order (latest first)\r\n//   // --- FIX END ---\r\n\r\n//   const hasMessages = agentMessages.length > 0;\r\n\r\n//   const toggleRoundExpansion = (round) => {\r\n//     const newExpanded = new Set(expandedRounds);\r\n//     if (newExpanded.has(round)) {\r\n//       newExpanded.delete(round);\r\n//     } else {\r\n//       newExpanded.add(round);\r\n//     }\r\n//     setExpandedRounds(newExpanded);\r\n//   };\r\n  \r\n//   const isWaitingForResponse = debateStatus === 'debating' && !messagesByRound[currentRound] && currentRound > 0;\r\n\r\n//   return (\r\n//     <motion.div \r\n//       initial={{ opacity: 0, scale: 0.9, rotateX: -10 }}\r\n//       animate={{ opacity: 1, scale: 1, rotateX: 0 }}\r\n//       whileHover={{ y: -5, scale: 1.02 }}\r\n//       className={`\r\n//         ${config.colors.bg} \r\n//         backdrop-blur-xl border-2 ${config.colors.border} rounded-3xl p-6 h-full min-h-[600px] max-h-[800px]\r\n//         ${isActive ? `${config.colors.glow} shadow-2xl` : 'shadow-xl'}\r\n//         transition-all duration-500 relative overflow-hidden flex flex-col\r\n//       `}\r\n//     >\r\n//       {/* Particle Effects */}\r\n//       <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\r\n//         {isActive && [...Array(15)].map((_, i) => (\r\n//           <motion.div\r\n//             key={i}\r\n//             className={`absolute w-1 h-1 ${config.colors.particle}/60 rounded-full`}\r\n//             initial={{ \r\n//               x: Math.random() * 300,\r\n//               y: Math.random() * 400,\r\n//               opacity: 0 \r\n//             }}\r\n//             animate={{ \r\n//               y: [null, -20],\r\n//               opacity: [0, 1, 0],\r\n//               scale: [0, 1, 0]\r\n//             }}\r\n//             transition={{\r\n//               duration: Math.random() * 2 + 1,\r\n//               repeat: Infinity,\r\n//               delay: Math.random() * 2,\r\n//               ease: \"easeOut\"\r\n//             }}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n\r\n//       {/* Neural Activity Indicator */}\r\n//       {isActive && (\r\n//         <div className=\"absolute top-4 right-4 z-20\">\r\n//           <motion.div\r\n//             className={`${config.colors.accent} backdrop-blur-sm rounded-2xl px-4 py-2 border ${config.colors.border}`}\r\n//             animate={{ \r\n//               scale: [1, 1.1, 1],\r\n//               boxShadow: [`0 0 20px ${config.colors.glow.split('/')[0]}`, `0 0 40px ${config.colors.glow.split('/')[0]}`, `0 0 20px ${config.colors.glow.split('/')[0]}`]\r\n//             }}\r\n//             transition={{ duration: 1, repeat: Infinity }}\r\n//           >\r\n//             <div className=\"flex items-center space-x-2\">\r\n//               <motion.div \r\n//                 className={`w-2 h-2 ${config.colors.particle} rounded-full`}\r\n//                 animate={{ scale: [1, 1.5, 1] }}\r\n//                 transition={{ duration: 0.5, repeat: Infinity }}\r\n//               />\r\n//               <span className={`text-xs font-bold ${config.colors.primary}`}>\r\n//                 Neural Active\r\n//               </span>\r\n//             </div>\r\n//           </motion.div>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Agent Header */}\r\n//       <div className=\"flex items-start space-x-4 mb-6 flex-shrink-0 relative z-10\">\r\n//         <motion.div\r\n//           className={`${config.colors.accent} backdrop-blur-sm p-4 rounded-2xl border ${config.colors.border}`}\r\n//           animate={isActive ? { \r\n//             rotate: [0, 5, -5, 0],\r\n//             scale: [1, 1.05, 1]\r\n//           } : {}}\r\n//           transition={{ duration: 2, repeat: Infinity }}\r\n//         >\r\n//           <Icon className={`h-8 w-8 ${config.colors.primary}`} />\r\n//         </motion.div>\r\n        \r\n//         <div className=\"flex-1 min-w-0\">\r\n//           <h3 className={`text-2xl font-black ${config.colors.primary} mb-1`}>\r\n//             {config.title}\r\n//           </h3>\r\n//           <p className=\"text-slate-300 font-bold text-sm mb-2\">\r\n//             {config.subtitle}\r\n//           </p>\r\n//           <p className=\"text-slate-400 text-xs leading-tight mb-2\">\r\n//             {config.description}\r\n//           </p>\r\n//           <p className=\"text-xs text-slate-500 font-medium\">\r\n//             {config.personality}\r\n//           </p>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {/* Messages Container */}\r\n//       <div className=\"flex-1 overflow-y-auto space-y-4 custom-scrollbar\">\r\n//         <AnimatePresence>\r\n//           {allRounds.length === 0 ? (\r\n//             <motion.div \r\n//               initial={{ opacity: 0 }}\r\n//               animate={{ opacity: 1 }}\r\n//               className=\"text-center py-12 flex flex-col items-center justify-center h-full\"\r\n//             >\r\n//               <motion.div\r\n//                 animate={{ scale: [1, 1.1, 1], opacity: [0.5, 1, 0.5] }}\r\n//                 transition={{ duration: 2, repeat: Infinity }}\r\n//                 className=\"mb-4\"\r\n//               >\r\n//                 <UserIcon className=\"h-16 w-16 mx-auto text-slate-600\" />\r\n//               </motion.div>\r\n//               <p className=\"text-slate-400 font-medium\">\r\n//                 Neural pathways initializing...\r\n//               </p>\r\n//             </motion.div>\r\n//           ) : (\r\n//             allRounds.map(round => (\r\n//               <RoundSection\r\n//                 key={round}\r\n//                 round={round}\r\n//                 messages={messagesByRound[round] || []}\r\n//                 isExpanded={expandedRounds.has(round)}\r\n//                 onToggleExpansion={toggleRoundExpansion}\r\n//                 config={config}\r\n//                 isCurrentRound={round === currentRound}\r\n//                 isWaitingForRound={isWaitingForResponse && round === currentRound}\r\n//               />\r\n//             ))\r\n//           )}\r\n//         </AnimatePresence>\r\n//       </div>\r\n\r\n//       {/* Agent Stats Footer */}\r\n//       <motion.div \r\n//         className=\"mt-6 pt-4 border-t border-slate-600/30 flex-shrink-0\"\r\n//         initial={{ opacity: 0 }}\r\n//         animate={{ opacity: 1 }}\r\n//         transition={{ delay: 0.5 }}\r\n//       >\r\n//         <div className=\"flex justify-between items-center text-xs\">\r\n//           <div className=\"flex items-center space-x-4\">\r\n//             <span className=\"text-slate-400\">\r\n//               <span className={`${config.colors.primary} font-bold`}>{agentMessages.length}</span> responses\r\n//             </span>\r\n//             <span className=\"text-slate-400\">\r\n//               <span className={`${config.colors.primary} font-bold`}>{allRounds.length}</span> rounds\r\n//             </span>\r\n//           </div>\r\n//           <div className=\"flex items-center space-x-2\">\r\n//             <div className={`w-2 h-2 ${currentRound > 0 ? config.colors.particle : 'bg-slate-600'} rounded-full`} />\r\n//             <span className=\"text-slate-400 font-medium\">\r\n//               Round <span className={config.colors.primary}>{currentRound}</span>\r\n//             </span>\r\n//           </div>\r\n//         </div>\r\n//       </motion.div>\r\n//     </motion.div>\r\n//   );\r\n// };\r\n\r\n// const RoundSection = ({ round, messages, isExpanded, onToggleExpansion, config, isCurrentRound, isWaitingForRound }) => {\r\n//   const hasMessages = messages && messages.length > 0;\r\n  \r\n//   return (\r\n//     <motion.div \r\n//       className=\"border border-slate-600/30 rounded-2xl overflow-hidden backdrop-blur-sm\"\r\n//       whileHover={{ scale: 1.01 }}\r\n//       transition={{ type: \"spring\", stiffness: 300 }}\r\n//     >\r\n//       {/* Round Header */}\r\n//       <motion.button\r\n//         onClick={() => onToggleExpansion(round)}\r\n//         className={`w-full px-6 py-4 flex items-center justify-between transition-all duration-300 ${\r\n//           isCurrentRound \r\n//             ? `${config.colors.accent} ${config.colors.primary} font-bold border-b ${config.colors.border}` \r\n//             : 'bg-slate-800/30 text-slate-300 hover:bg-slate-700/50'\r\n//         }`}\r\n//         whileHover={{ backgroundColor: isCurrentRound ? undefined : 'rgba(51, 65, 85, 0.7)' }}\r\n//       >\r\n//         <div className=\"flex items-center space-x-4\">\r\n//           <motion.div\r\n//             className={`w-3 h-3 rounded-full ${isCurrentRound ? config.colors.particle : 'bg-slate-500'}`}\r\n//             animate={isCurrentRound ? { scale: [1, 1.3, 1] } : {}}\r\n//             transition={{ duration: 1, repeat: Infinity }}\r\n//           />\r\n//           <span className=\"font-bold\">Round {round}</span>\r\n//           {isCurrentRound && (\r\n//             <span className=\"text-xs bg-white/20 px-2 py-1 rounded-full\">\r\n//               Active\r\n//             </span>\r\n//           )}\r\n//           {isWaitingForRound && (\r\n//             <motion.span \r\n//               className=\"text-xs text-orange-400 font-medium\"\r\n//               animate={{ opacity: [0.5, 1, 0.5] }}\r\n//               transition={{ duration: 1, repeat: Infinity }}\r\n//             >\r\n//               Processing...\r\n//             </motion.span>\r\n//           )}\r\n//         </div>\r\n        \r\n//         <div className=\"flex items-center space-x-3\">\r\n//           {hasMessages && (\r\n//             <span className=\"text-xs opacity-70 bg-slate-700/50 px-2 py-1 rounded-full\">\r\n//               {messages.length} response{messages.length !== 1 ? 's' : ''}\r\n//             </span>\r\n//           )}\r\n//           <motion.div\r\n//             animate={{ rotate: isExpanded ? 180 : 0 }}\r\n//             transition={{ duration: 0.2 }}\r\n//           >\r\n//             <ChevronDownIcon className=\"h-5 w-5\" />\r\n//           </motion.div>\r\n//         </div>\r\n//       </motion.button>\r\n\r\n//       {/* Round Content */}\r\n//       <AnimatePresence>\r\n//         {isExpanded && (\r\n//           <motion.div\r\n//             initial={{ height: 0, opacity: 0 }}\r\n//             animate={{ height: 'auto', opacity: 1 }}\r\n//             exit={{ height: 0, opacity: 0 }}\r\n//             transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n//             className=\"overflow-hidden\"\r\n//           >\r\n//             <div className=\"p-6 bg-slate-800/20 backdrop-blur-sm space-y-4\">\r\n//               {isWaitingForRound ? (\r\n//                 <div className=\"text-center py-8\">\r\n//                   <motion.div\r\n//                     animate={{ rotate: 360 }}\r\n//                     transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\r\n//                     className=\"w-8 h-8 border-2 border-current border-t-transparent rounded-full mx-auto mb-3 opacity-50\"\r\n//                   />\r\n//                   <p className=\"text-sm text-slate-400\">Neural processing in progress...</p>\r\n//                 </div>\r\n//               ) : !hasMessages ? (\r\n//                 <div className=\"text-center py-8\">\r\n//                   <p className=\"text-sm text-slate-500 italic\">No neural activity recorded</p>\r\n//                 </div>\r\n//               ) : (\r\n//                 messages.map((message, index) => (\r\n//                   <motion.div\r\n//                     key={message.id || `${round}-${index}`}\r\n//                     initial={{ opacity: 0, y: 20, scale: 0.95 }}\r\n//                     animate={{ opacity: 1, y: 0, scale: 1 }}\r\n//                     transition={{ delay: index * 0.1, type: \"spring\" }}\r\n//                     className=\"bg-slate-900/50 backdrop-blur-sm rounded-xl p-4 border border-slate-600/20 hover:border-slate-500/30 transition-all duration-300\"\r\n//                   >\r\n//                     <div className=\"flex justify-between items-center mb-3\">\r\n//                       <span className=\"text-xs text-slate-400 font-medium\">\r\n//                         {new Date(message.data.timestamp).toLocaleTimeString([], {\r\n//                           hour: '2-digit', \r\n//                           minute: '2-digit',\r\n//                           second: '2-digit'\r\n//                         })}\r\n//                       </span>\r\n//                       <div className=\"flex items-center space-x-2\">\r\n//                         <div className={`w-2 h-2 ${config.colors.particle} rounded-full animate-pulse`} />\r\n//                         <span className={`text-xs font-bold ${config.colors.primary} bg-slate-800/50 px-2 py-1 rounded-full`}>\r\n//                           R{message.data.round}\r\n//                         </span>\r\n//                       </div>\r\n//                     </div>\r\n//                     <p className=\"text-slate-200 leading-relaxed font-medium\">\r\n//                       {message.data.content}\r\n//                     </p>\r\n//                   </motion.div>\r\n//                 ))\r\n//               )}\r\n//             </div>\r\n//           </motion.div>\r\n//         )}\r\n//       </AnimatePresence>\r\n//     </motion.div>\r\n//   );\r\n// };\r\n\r\n// export default AgentPanel;\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}