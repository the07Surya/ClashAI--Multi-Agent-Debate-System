{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import { motion, AnimatePresence } from 'framer-motion';\n// import { \n//   ArrowPathIcon, \n//   PlayIcon,\n//   PauseIcon,\n//   SparklesIcon,\n//   BoltIcon,\n//   RocketLaunchIcon\n// } from '@heroicons/react/24/outline';\n\n// import useWebSocket from '../hooks/useWebSocket';\n// import ResearchPanel from './ResearchPanel';\n// import AgentPanel from './AgentPanel';\n// import JudgePanel from './JudgePanel';\n// import FinalReport from './FinalReport';\n\n// const DebateInterface = () => {\n//   const [query, setQuery] = useState('');\n//   const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n//   const [debateState, setDebateState] = useState({\n//     status: 'idle',\n//     researchBrief: null,\n//     agentMessages: [],\n//     judgeDecisions: [],\n//     finalReport: null,\n//     currentRound: 0,\n//     activeAgents: new Set(),\n//     startTime: null\n//   });\n\n//   const messagesEndRef = useRef(null);\n//   const { isConnected, messages, sendMessage, clearMessages, connectionStatus } = useWebSocket(\n//     `ws://localhost:8000/debate/${sessionId}`\n//   );\n\n//   // FIX: This ref tracks how many messages we've already processed. It's essential\n//   // for correctly handling messages that arrive in quick batches.\n//   const processedMessagesCount = useRef(0);\n\n//   // Auto-scroll to bottom on new messages\n//   const scrollToBottom = () => {\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n//   };\n\n//   useEffect(() => {\n//     scrollToBottom();\n//   }, [debateState.agentMessages, debateState.finalReport]);\n\n//   // FIX: Replaced the faulty message handler with a robust batch-processing logic.\n//   // This ensures that no messages are dropped, solving the \"No neural activity\" issue.\n//   useEffect(() => {\n//     const newMessages = messages.slice(processedMessagesCount.current);\n//     if (newMessages.length === 0) return;\n\n//     setDebateState(prev => {\n//       const newState = { \n//         ...prev,\n//         agentMessages: [...prev.agentMessages],\n//         judgeDecisions: [...prev.judgeDecisions],\n//       };\n\n//       newMessages.forEach(message => {\n//         const messageExists = \n//           newState.agentMessages.some(m => m.id === message.id) ||\n//           newState.judgeDecisions.some(d => d.id === message.id);\n\n//         if (messageExists) return;\n\n//         switch (message.type) {\n//           case 'research_complete':\n//             newState.status = 'research_complete';\n//             newState.researchBrief = message.data.brief;\n//             break;\n//           case 'agent_response':\n//             newState.status = 'debating';\n//             newState.agentMessages.push(message);\n//             newState.currentRound = Math.max(newState.currentRound, message.data.round || 1);\n//             newState.activeAgents = new Set();\n//             break;\n//           case 'judge_decision':\n//             newState.status = 'judge_deciding';\n//             newState.judgeDecisions.push(message);\n//             break;\n//           case 'final_report':\n//             newState.status = 'complete';\n//             newState.finalReport = message.data;\n//             break;\n//           case 'debate_complete':\n//             newState.status = 'complete';\n//             break;\n//           case 'error':\n//             console.error('Debate error:', message.message);\n//             newState.status = 'error';\n//             break;\n//           default:\n//             if (message.type === 'round_start') {\n//               newState.currentRound = message.data.round;\n//               newState.status = 'debating';\n//             }\n//             console.log('Received message:', message.type, message.data);\n//             break;\n//         }\n//       });\n\n//       return newState;\n//     });\n\n//     processedMessagesCount.current = messages.length;\n//   }, [messages]);\n\n//   const startDebate = () => {\n//     if (!query.trim() || !isConnected) return;\n\n//     clearMessages();\n//     processedMessagesCount.current = 0; // Reset counter on new debate\n//     setDebateState({\n//       status: 'starting',\n//       researchBrief: null,\n//       agentMessages: [],\n//       judgeDecisions: [],\n//       finalReport: null,\n//       currentRound: 0,\n//       activeAgents: new Set(['researcher']),\n//       startTime: new Date()\n//     });\n\n//     const success = sendMessage({\n//       type: 'start_debate',\n//       query: query\n//     });\n\n//     if (success) {\n//       setDebateState(prev => ({ ...prev, status: 'researching' }));\n//     }\n//   };\n\n//   const resetDebate = () => {\n//     setQuery('');\n//     clearMessages();\n//     processedMessagesCount.current = 0; // Reset counter on reset\n//     setDebateState({\n//       status: 'idle',\n//       researchBrief: null,\n//       agentMessages: [],\n//       judgeDecisions: [],\n//       finalReport: null,\n//       currentRound: 0,\n//       activeAgents: new Set(),\n//       startTime: null\n//     });\n//   };\n\n//   const getStatusConfig = () => {\n//     const configs = {\n//       idle: { \n//         message: 'Ready to unleash the power of AI debate', \n//         color: 'text-slate-700',\n//         bgColor: 'bg-gradient-to-r from-slate-100 to-gray-100',\n//         borderColor: 'border-slate-300',\n//         icon: '🧠',\n//         glow: 'shadow-slate-200/50'\n//       },\n//       starting: { \n//         message: 'Initializing neural debate matrix...', \n//         color: 'text-cyan-700',\n//         bgColor: 'bg-gradient-to-r from-cyan-100 to-blue-100',\n//         borderColor: 'border-cyan-300',\n//         icon: '⚡',\n//         glow: 'shadow-cyan-300/60'\n//       },\n//       researching: { \n//         message: 'AI researcher scanning global knowledge...', \n//         color: 'text-blue-700',\n//         bgColor: 'bg-gradient-to-r from-blue-100 to-indigo-100',\n//         borderColor: 'border-blue-300',\n//         icon: '🔍',\n//         glow: 'shadow-blue-300/60'\n//       },\n//       research_complete: { \n//         message: 'Knowledge acquired. Experts awakening...', \n//         color: 'text-emerald-700',\n//         bgColor: 'bg-gradient-to-r from-emerald-100 to-green-100',\n//         borderColor: 'border-emerald-300',\n//         icon: '✨',\n//         glow: 'shadow-emerald-300/60'\n//       },\n//       debating: { \n//         message: `Round ${debateState.currentRound} • Neural combat engaged`, \n//         color: 'text-purple-700',\n//         bgColor: 'bg-gradient-to-r from-purple-100 to-pink-100',\n//         borderColor: 'border-purple-300',\n//         icon: '🎯',\n//         glow: 'shadow-purple-300/60'\n//       },\n//       judge_deciding: { \n//         message: 'Supreme Judge evaluating neural patterns...', \n//         color: 'text-amber-700',\n//         bgColor: 'bg-gradient-to-r from-amber-100 to-orange-100',\n//         borderColor: 'border-amber-300',\n//         icon: '⚖️',\n//         glow: 'shadow-amber-300/60'\n//       },\n//       moderating: { \n//         message: 'Synthesizing collective intelligence...', \n//         color: 'text-indigo-700',\n//         bgColor: 'bg-gradient-to-r from-indigo-100 to-violet-100',\n//         borderColor: 'border-indigo-300',\n//         icon: '🧬',\n//         glow: 'shadow-indigo-300/60'\n//       },\n//       complete: { \n//         message: 'Debate matrix complete • Insights extracted', \n//         color: 'text-emerald-700',\n//         bgColor: 'bg-gradient-to-r from-emerald-100 to-green-100',\n//         borderColor: 'border-emerald-300',\n//         icon: '🎉',\n//         glow: 'shadow-emerald-300/60'\n//       },\n//       error: { \n//         message: 'Neural network disruption detected', \n//         color: 'text-red-700',\n//         bgColor: 'bg-gradient-to-r from-red-100 to-pink-100',\n//         borderColor: 'border-red-300',\n//         icon: '⚠️',\n//         glow: 'shadow-red-300/60'\n//       }\n//     };\n//     return configs[debateState.status] || configs.idle;\n//   };\n\n//   const isDebateActive = ['starting', 'researching', 'research_complete', 'debating', 'judge_deciding', 'moderating'].includes(debateState.status);\n//   const statusConfig = getStatusConfig();\n\n//   const getConnectionStatusConfig = () => {\n//     const configs = {\n//       connected: { \n//         color: 'bg-emerald-500', \n//         text: 'Neural Link Active', \n//         textColor: 'text-emerald-800',\n//         bgColor: 'bg-emerald-50',\n//         borderColor: 'border-emerald-200' \n//       },\n//       connecting: { \n//         color: 'bg-amber-500', \n//         text: 'Establishing Link...', \n//         textColor: 'text-amber-800',\n//         bgColor: 'bg-amber-50',\n//         borderColor: 'border-amber-200' \n//       },\n//       reconnecting: { \n//         color: 'bg-amber-500', \n//         text: 'Reconnecting Neural Link...', \n//         textColor: 'text-amber-800',\n//         bgColor: 'bg-amber-50',\n//         borderColor: 'border-amber-200' \n//       },\n//       disconnected: { \n//         color: 'bg-red-500', \n//         text: 'Neural Link Offline', \n//         textColor: 'text-red-800',\n//         bgColor: 'bg-red-50',\n//         borderColor: 'border-red-200' \n//       },\n//       error: { \n//         color: 'bg-red-500', \n//         text: 'Connection Error', \n//         textColor: 'text-red-800',\n//         bgColor: 'bg-red-50',\n//         borderColor: 'border-red-200' \n//       },\n//       failed: { \n//         color: 'bg-red-500', \n//         text: 'Link Failed', \n//         textColor: 'text-red-800',\n//         bgColor: 'bg-red-50',\n//         borderColor: 'border-red-200' \n//       }\n//     };\n//     return configs[connectionStatus] || configs.disconnected;\n//   };\n\n//   const connectionConfig = getConnectionStatusConfig();\n\n//   return (\n//     <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden\">\n//       {/* Animated Background Elements */}\n//       <div className=\"absolute inset-0 overflow-hidden\">\n//         <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob\"></div>\n//         <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-cyan-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000\"></div>\n//         <div className=\"absolute top-40 left-1/2 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000\"></div>\n\n//         {/* Neural Network Grid */}\n//         <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-cyan-500/5 to-transparent\"></div>\n//         <div className=\"absolute inset-0\" style={{\n//           backgroundImage: `radial-gradient(circle at 1px 1px, rgba(99, 102, 241, 0.1) 1px, transparent 0)`,\n//           backgroundSize: '20px 20px'\n//         }}></div>\n//       </div>\n\n//       <div className=\"relative z-10 max-w-7xl mx-auto p-6 space-y-8\">\n\n//         {/* Stunning Header */}\n//         <motion.div \n//           initial={{ opacity: 0, y: -30 }}\n//           animate={{ opacity: 1, y: 0 }}\n//           transition={{ duration: 0.8, ease: \"easeOut\" }}\n//           className=\"text-center py-12\"\n//         >\n//           <div className=\"relative\">\n//             <motion.h1 \n//               className=\"text-7xl md:text-8xl font-black bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-4 tracking-tight\"\n//               initial={{ scale: 0.9, opacity: 0 }}\n//               animate={{ scale: 1, opacity: 1 }}\n//               transition={{ duration: 1, ease: \"easeOut\" }}\n//             >\n//               Chimera\n//             </motion.h1>\n\n//             <motion.div\n//               className=\"absolute -top-4 -right-4 text-4xl\"\n//               animate={{ \n//                 rotate: [0, 10, -10, 0],\n//                 scale: [1, 1.1, 1]\n//               }}\n//               transition={{ \n//                 duration: 2,\n//                 repeat: Infinity,\n//                 ease: \"easeInOut\"\n//               }}\n//             >\n//               ⚡\n//             </motion.div>\n//           </div>\n\n//           <motion.div\n//             initial={{ opacity: 0, y: 20 }}\n//             animate={{ opacity: 1, y: 0 }}\n//             transition={{ delay: 0.5, duration: 0.6 }}\n//             className=\"space-y-4\"\n//           >\n//             <p className=\"text-2xl md:text-3xl text-slate-300 font-bold tracking-wide\">\n//               Neural Multi-Agent Debate System\n//             </p>\n//             <p className=\"text-lg text-slate-400 max-w-2xl mx-auto leading-relaxed\">\n//               Unleash the collective intelligence of AI experts in epic debates that reshape understanding\n//             </p>\n\n//             <div className=\"flex items-center justify-center space-x-6 mt-6\">\n//               <div className=\"flex items-center space-x-2 text-cyan-400\">\n//                 <SparklesIcon className=\"h-5 w-5\" />\n//                 <span className=\"text-sm font-medium\">AI-Powered</span>\n//               </div>\n//               <div className=\"flex items-center space-x-2 text-purple-400\">\n//                 <BoltIcon className=\"h-5 w-5\" />\n//                 <span className=\"text-sm font-medium\">Real-Time</span>\n//               </div>\n//               <div className=\"flex items-center space-x-2 text-pink-400\">\n//                 <RocketLaunchIcon className=\"h-5 w-5\" />\n//                 <span className=\"text-sm font-medium\">Cutting-Edge</span>\n//               </div>\n//             </div>\n//           </motion.div>\n//         </motion.div>\n\n//         {/* Futuristic Query Input Section */}\n//         <motion.div \n//           initial={{ opacity: 0, y: 30 }}\n//           animate={{ opacity: 1, y: 0 }}\n//           transition={{ delay: 0.3, duration: 0.8 }}\n//           className=\"relative\"\n//         >\n//           <div className=\"bg-gradient-to-r from-slate-800/80 via-slate-900/90 to-slate-800/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-slate-700/50 p-8\">\n//             <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-purple-500/10 to-pink-500/10 rounded-3xl blur-xl\"></div>\n\n//             <div className=\"relative space-y-6\">\n//               <div className=\"flex flex-col lg:flex-row gap-4\">\n//                 <div className=\"flex-1 relative group\">\n//                   <input\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={(e) => setQuery(e.target.value)}\n//                     placeholder=\"Enter your complex question or debate topic...\"\n//                     className=\"w-full p-6 pl-16 bg-gradient-to-r from-slate-900/50 to-slate-800/50 border-2 border-slate-600/50 rounded-2xl focus:ring-4 focus:ring-purple-500/30 focus:border-purple-500/50 transition-all duration-300 text-white placeholder-slate-400 text-lg font-medium backdrop-blur-sm group-hover:border-slate-500/70\"\n//                     disabled={isDebateActive}\n//                     onKeyPress={(e) => e.key === 'Enter' && !isDebateActive && startDebate()}\n//                   />\n//                   <div className=\"absolute left-6 top-1/2 transform -translate-y-1/2 text-slate-400 group-hover:text-cyan-400 transition-colors duration-300\">\n//                     <motion.div\n//                       animate={{ scale: [1, 1.1, 1] }}\n//                       transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\n//                     >\n//                       🧠\n//                     </motion.div>\n//                   </div>\n//                 </div>\n\n//                 <div className=\"flex space-x-4\">\n//                   <motion.button\n//                     whileHover={{ scale: 1.02, boxShadow: \"0 20px 40px -12px rgba(139, 92, 246, 0.3)\" }}\n//                     whileTap={{ scale: 0.98 }}\n//                     onClick={startDebate}\n//                     disabled={!query.trim() || !isConnected || isDebateActive}\n//                     className=\"px-8 py-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-2xl hover:from-purple-700 hover:to-pink-700 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed transition-all duration-300 flex items-center space-x-3 font-bold text-lg shadow-xl border border-purple-500/50\"\n//                   >\n//                     {isDebateActive ? (\n//                       <>\n//                         <motion.div\n//                           animate={{ rotate: 360 }}\n//                           transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n//                         >\n//                           <PauseIcon className=\"h-6 w-6\" />\n//                         </motion.div>\n//                         <span>Neural Active</span>\n//                       </>\n//                     ) : (\n//                       <>\n//                         <PlayIcon className=\"h-6 w-6\" />\n//                         <span>Ignite Debate</span>\n//                       </>\n//                     )}\n//                   </motion.button>\n\n//                   <motion.button\n//                     whileHover={{ scale: 1.02 }}\n//                     whileTap={{ scale: 0.98 }}\n//                     onClick={resetDebate}\n//                     disabled={isDebateActive}\n//                     className=\"px-6 py-6 bg-gradient-to-r from-slate-700 to-slate-800 text-slate-300 rounded-2xl hover:from-slate-600 hover:to-slate-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 flex items-center space-x-3 font-semibold shadow-xl border border-slate-600/50\"\n//                   >\n//                     <ArrowPathIcon className=\"h-6 w-6\" />\n//                     <span>Reset</span>\n//                   </motion.button>\n//                 </div>\n//               </div>\n//             </div>\n//           </div>\n//         </motion.div>\n\n//         {/* Futuristic Status Bar */}\n//         <motion.div \n//           initial={{ opacity: 0 }}\n//           animate={{ opacity: 1 }}\n//           transition={{ delay: 0.6, duration: 0.6 }}\n//           className=\"flex flex-col sm:flex-row items-center justify-between gap-4\"\n//         >\n//           <motion.div \n//             className={`inline-flex items-center px-6 py-3 rounded-2xl font-bold text-sm border-2 backdrop-blur-sm ${statusConfig.bgColor} ${statusConfig.color} ${statusConfig.borderColor} ${statusConfig.glow} shadow-xl`}\n//             animate={{ \n//               boxShadow: isDebateActive ? \n//                 [\"0 0 20px rgba(139, 92, 246, 0.3)\", \"0 0 40px rgba(139, 92, 246, 0.5)\", \"0 0 20px rgba(139, 92, 246, 0.3)\"] :\n//                 \"0 0 20px rgba(0, 0, 0, 0.1)\"\n//             }}\n//             transition={{ duration: 2, repeat: Infinity }}\n//           >\n//             <motion.span \n//               className=\"mr-3 text-lg\"\n//               animate={isDebateActive ? { \n//                 scale: [1, 1.2, 1],\n//                 rotate: [0, 5, -5, 0]\n//               } : {}}\n//               transition={{ duration: 1, repeat: Infinity }}\n//             >\n//               {statusConfig.icon}\n//             </motion.span>\n//             {statusConfig.message}\n//           </motion.div>\n\n//           <motion.div \n//             className={`inline-flex items-center px-4 py-2 rounded-xl text-sm font-bold border-2 backdrop-blur-sm ${connectionConfig.bgColor} ${connectionConfig.textColor} ${connectionConfig.borderColor} shadow-lg`}\n//             animate={{ opacity: [0.8, 1, 0.8] }}\n//             transition={{ duration: 2, repeat: Infinity }}\n//           >\n//             <motion.div \n//               className={`w-3 h-3 rounded-full mr-3 ${connectionConfig.color}`}\n//               animate={connectionStatus === 'connecting' || connectionStatus === 'reconnecting' ? \n//                 { scale: [1, 1.3, 1] } : {}\n//               }\n//               transition={{ duration: 0.8, repeat: Infinity }}\n//             />\n//             {connectionConfig.text}\n//           </motion.div>\n//         </motion.div>\n\n//         {/* Research Phase */}\n//         <AnimatePresence>\n//           {(debateState.status === 'researching' || debateState.researchBrief) && (\n//             <ResearchPanel \n//               researchBrief={debateState.researchBrief} \n//               isLoading={debateState.status === 'researching'}\n//             />\n//           )}\n//         </AnimatePresence>\n\n//         {/* Judge Decisions */}\n//         <AnimatePresence>\n//           {debateState.judgeDecisions.length > 0 && (\n//             <JudgePanel judgeDecisions={debateState.judgeDecisions} />\n//           )}\n//         </AnimatePresence>\n\n//         {/* Expert Agents Grid */}\n//         <AnimatePresence>\n//           {(debateState.status === 'debating' || debateState.agentMessages.length > 0 || debateState.status === 'research_complete') && (\n//             <motion.div \n//               initial={{ opacity: 0, y: 30 }}\n//               animate={{ opacity: 1, y: 0 }}\n//               transition={{ delay: 0.2, duration: 0.8 }}\n//               className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\"\n//             >\n//               {['innovator', 'skeptic', 'engineer', 'ethicist'].map((agent, index) => (\n//                 <motion.div\n//                   key={agent}\n//                   initial={{ opacity: 0, y: 50, rotateX: -15 }}\n//                   animate={{ opacity: 1, y: 0, rotateX: 0 }}\n//                   transition={{ delay: 0.1 * index, duration: 0.6, type: \"spring\" }}\n//                 >\n//                   <AgentPanel\n//                     agent={agent}\n//                     messages={debateState.agentMessages}\n//                     currentRound={debateState.currentRound}\n//                     isActive={debateState.activeAgents.has(agent)}\n//                     debateStatus={debateState.status}\n//                   />\n//                 </motion.div>\n//               ))}\n//             </motion.div>\n//           )}\n//         </AnimatePresence>\n\n//         {/* Final Report */}\n//         <AnimatePresence>\n//           {debateState.finalReport && (\n//             <FinalReport report={debateState.finalReport} />\n//           )}\n//         </AnimatePresence>\n\n//         {/* Scroll marker */}\n//         <div ref={messagesEndRef} />\n\n//         {/* Futuristic Debug Panel */}\n//         {process.env.NODE_ENV === 'development' && (\n//           <motion.div \n//             initial={{ opacity: 0, y: 20 }}\n//             animate={{ opacity: 1, y: 0 }}\n//             className=\"bg-gradient-to-r from-slate-900/90 to-slate-800/90 backdrop-blur-xl text-cyan-400 p-6 rounded-2xl font-mono text-xs space-y-2 border border-slate-700/50 shadow-2xl\"\n//           >\n//             <div className=\"text-cyan-300 font-bold mb-3 flex items-center\">\n//               <div className=\"w-2 h-2 bg-cyan-400 rounded-full mr-2 animate-pulse\"></div>\n//               Neural Debug Console\n//             </div>\n//             <div className=\"grid grid-cols-2 gap-4\">\n//               <div>Session: <span className=\"text-purple-400\">{sessionId}</span></div>\n//               <div>Status: <span className=\"text-green-400\">{debateState.status}</span></div>\n//               <div>Messages: <span className=\"text-yellow-400\">{messages.length}</span></div>\n//               <div>Round: <span className=\"text-pink-400\">{debateState.currentRound}</span></div>\n//               <div>Connection: <span className=\"text-blue-400\">{connectionStatus}</span></div>\n//               <div>Agents: <span className=\"text-indigo-400\">{debateState.agentMessages.length}</span></div>\n//             </div>\n//             {debateState.startTime && (\n//               <div className=\"text-center pt-2 border-t border-slate-700\">\n//                 Duration: <span className=\"text-emerald-400 font-bold\">\n//                   {Math.round((new Date() - debateState.startTime) / 1000)}s\n//                 </span>\n//               </div>\n//             )}\n//           </motion.div>\n//         )}\n//       </div>\n\n//       {/* Floating Particles Effect */}\n//       <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n//         {[...Array(20)].map((_, i) => (\n//           <motion.div\n//             key={i}\n//             className=\"absolute w-1 h-1 bg-cyan-400/30 rounded-full\"\n//             initial={{ \n//               x: Math.random() * window.innerWidth,\n//               y: window.innerHeight + 10,\n//               opacity: 0 \n//             }}\n//             animate={{ \n//               y: -10,\n//               opacity: [0, 1, 0],\n//               scale: [0, 1, 0]\n//             }}\n//             transition={{\n//               duration: Math.random() * 10 + 10,\n//               repeat: Infinity,\n//               delay: Math.random() * 5,\n//               ease: \"easeOut\"\n//             }}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default DebateInterface;","map":{"version":3,"names":[],"sources":["C:/Users/SuryaPratapRout/OneDrive - GyanSys Inc/Desktop/Apex/Chimera-Debate/Chimera-Clue/frontend/src/components/DebateInterface.jsx"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import { motion, AnimatePresence } from 'framer-motion';\r\n// import { \r\n//   ArrowPathIcon, \r\n//   PlayIcon,\r\n//   PauseIcon,\r\n//   SparklesIcon,\r\n//   BoltIcon,\r\n//   RocketLaunchIcon\r\n// } from '@heroicons/react/24/outline';\r\n\r\n// import useWebSocket from '../hooks/useWebSocket';\r\n// import ResearchPanel from './ResearchPanel';\r\n// import AgentPanel from './AgentPanel';\r\n// import JudgePanel from './JudgePanel';\r\n// import FinalReport from './FinalReport';\r\n\r\n// const DebateInterface = () => {\r\n//   const [query, setQuery] = useState('');\r\n//   const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\r\n//   const [debateState, setDebateState] = useState({\r\n//     status: 'idle',\r\n//     researchBrief: null,\r\n//     agentMessages: [],\r\n//     judgeDecisions: [],\r\n//     finalReport: null,\r\n//     currentRound: 0,\r\n//     activeAgents: new Set(),\r\n//     startTime: null\r\n//   });\r\n\r\n//   const messagesEndRef = useRef(null);\r\n//   const { isConnected, messages, sendMessage, clearMessages, connectionStatus } = useWebSocket(\r\n//     `ws://localhost:8000/debate/${sessionId}`\r\n//   );\r\n  \r\n//   // FIX: This ref tracks how many messages we've already processed. It's essential\r\n//   // for correctly handling messages that arrive in quick batches.\r\n//   const processedMessagesCount = useRef(0);\r\n\r\n//   // Auto-scroll to bottom on new messages\r\n//   const scrollToBottom = () => {\r\n//     messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     scrollToBottom();\r\n//   }, [debateState.agentMessages, debateState.finalReport]);\r\n\r\n//   // FIX: Replaced the faulty message handler with a robust batch-processing logic.\r\n//   // This ensures that no messages are dropped, solving the \"No neural activity\" issue.\r\n//   useEffect(() => {\r\n//     const newMessages = messages.slice(processedMessagesCount.current);\r\n//     if (newMessages.length === 0) return;\r\n\r\n//     setDebateState(prev => {\r\n//       const newState = { \r\n//         ...prev,\r\n//         agentMessages: [...prev.agentMessages],\r\n//         judgeDecisions: [...prev.judgeDecisions],\r\n//       };\r\n\r\n//       newMessages.forEach(message => {\r\n//         const messageExists = \r\n//           newState.agentMessages.some(m => m.id === message.id) ||\r\n//           newState.judgeDecisions.some(d => d.id === message.id);\r\n        \r\n//         if (messageExists) return;\r\n\r\n//         switch (message.type) {\r\n//           case 'research_complete':\r\n//             newState.status = 'research_complete';\r\n//             newState.researchBrief = message.data.brief;\r\n//             break;\r\n//           case 'agent_response':\r\n//             newState.status = 'debating';\r\n//             newState.agentMessages.push(message);\r\n//             newState.currentRound = Math.max(newState.currentRound, message.data.round || 1);\r\n//             newState.activeAgents = new Set();\r\n//             break;\r\n//           case 'judge_decision':\r\n//             newState.status = 'judge_deciding';\r\n//             newState.judgeDecisions.push(message);\r\n//             break;\r\n//           case 'final_report':\r\n//             newState.status = 'complete';\r\n//             newState.finalReport = message.data;\r\n//             break;\r\n//           case 'debate_complete':\r\n//             newState.status = 'complete';\r\n//             break;\r\n//           case 'error':\r\n//             console.error('Debate error:', message.message);\r\n//             newState.status = 'error';\r\n//             break;\r\n//           default:\r\n//             if (message.type === 'round_start') {\r\n//               newState.currentRound = message.data.round;\r\n//               newState.status = 'debating';\r\n//             }\r\n//             console.log('Received message:', message.type, message.data);\r\n//             break;\r\n//         }\r\n//       });\r\n      \r\n//       return newState;\r\n//     });\r\n\r\n//     processedMessagesCount.current = messages.length;\r\n//   }, [messages]);\r\n\r\n//   const startDebate = () => {\r\n//     if (!query.trim() || !isConnected) return;\r\n    \r\n//     clearMessages();\r\n//     processedMessagesCount.current = 0; // Reset counter on new debate\r\n//     setDebateState({\r\n//       status: 'starting',\r\n//       researchBrief: null,\r\n//       agentMessages: [],\r\n//       judgeDecisions: [],\r\n//       finalReport: null,\r\n//       currentRound: 0,\r\n//       activeAgents: new Set(['researcher']),\r\n//       startTime: new Date()\r\n//     });\r\n\r\n//     const success = sendMessage({\r\n//       type: 'start_debate',\r\n//       query: query\r\n//     });\r\n\r\n//     if (success) {\r\n//       setDebateState(prev => ({ ...prev, status: 'researching' }));\r\n//     }\r\n//   };\r\n\r\n//   const resetDebate = () => {\r\n//     setQuery('');\r\n//     clearMessages();\r\n//     processedMessagesCount.current = 0; // Reset counter on reset\r\n//     setDebateState({\r\n//       status: 'idle',\r\n//       researchBrief: null,\r\n//       agentMessages: [],\r\n//       judgeDecisions: [],\r\n//       finalReport: null,\r\n//       currentRound: 0,\r\n//       activeAgents: new Set(),\r\n//       startTime: null\r\n//     });\r\n//   };\r\n\r\n//   const getStatusConfig = () => {\r\n//     const configs = {\r\n//       idle: { \r\n//         message: 'Ready to unleash the power of AI debate', \r\n//         color: 'text-slate-700',\r\n//         bgColor: 'bg-gradient-to-r from-slate-100 to-gray-100',\r\n//         borderColor: 'border-slate-300',\r\n//         icon: '🧠',\r\n//         glow: 'shadow-slate-200/50'\r\n//       },\r\n//       starting: { \r\n//         message: 'Initializing neural debate matrix...', \r\n//         color: 'text-cyan-700',\r\n//         bgColor: 'bg-gradient-to-r from-cyan-100 to-blue-100',\r\n//         borderColor: 'border-cyan-300',\r\n//         icon: '⚡',\r\n//         glow: 'shadow-cyan-300/60'\r\n//       },\r\n//       researching: { \r\n//         message: 'AI researcher scanning global knowledge...', \r\n//         color: 'text-blue-700',\r\n//         bgColor: 'bg-gradient-to-r from-blue-100 to-indigo-100',\r\n//         borderColor: 'border-blue-300',\r\n//         icon: '🔍',\r\n//         glow: 'shadow-blue-300/60'\r\n//       },\r\n//       research_complete: { \r\n//         message: 'Knowledge acquired. Experts awakening...', \r\n//         color: 'text-emerald-700',\r\n//         bgColor: 'bg-gradient-to-r from-emerald-100 to-green-100',\r\n//         borderColor: 'border-emerald-300',\r\n//         icon: '✨',\r\n//         glow: 'shadow-emerald-300/60'\r\n//       },\r\n//       debating: { \r\n//         message: `Round ${debateState.currentRound} • Neural combat engaged`, \r\n//         color: 'text-purple-700',\r\n//         bgColor: 'bg-gradient-to-r from-purple-100 to-pink-100',\r\n//         borderColor: 'border-purple-300',\r\n//         icon: '🎯',\r\n//         glow: 'shadow-purple-300/60'\r\n//       },\r\n//       judge_deciding: { \r\n//         message: 'Supreme Judge evaluating neural patterns...', \r\n//         color: 'text-amber-700',\r\n//         bgColor: 'bg-gradient-to-r from-amber-100 to-orange-100',\r\n//         borderColor: 'border-amber-300',\r\n//         icon: '⚖️',\r\n//         glow: 'shadow-amber-300/60'\r\n//       },\r\n//       moderating: { \r\n//         message: 'Synthesizing collective intelligence...', \r\n//         color: 'text-indigo-700',\r\n//         bgColor: 'bg-gradient-to-r from-indigo-100 to-violet-100',\r\n//         borderColor: 'border-indigo-300',\r\n//         icon: '🧬',\r\n//         glow: 'shadow-indigo-300/60'\r\n//       },\r\n//       complete: { \r\n//         message: 'Debate matrix complete • Insights extracted', \r\n//         color: 'text-emerald-700',\r\n//         bgColor: 'bg-gradient-to-r from-emerald-100 to-green-100',\r\n//         borderColor: 'border-emerald-300',\r\n//         icon: '🎉',\r\n//         glow: 'shadow-emerald-300/60'\r\n//       },\r\n//       error: { \r\n//         message: 'Neural network disruption detected', \r\n//         color: 'text-red-700',\r\n//         bgColor: 'bg-gradient-to-r from-red-100 to-pink-100',\r\n//         borderColor: 'border-red-300',\r\n//         icon: '⚠️',\r\n//         glow: 'shadow-red-300/60'\r\n//       }\r\n//     };\r\n//     return configs[debateState.status] || configs.idle;\r\n//   };\r\n\r\n//   const isDebateActive = ['starting', 'researching', 'research_complete', 'debating', 'judge_deciding', 'moderating'].includes(debateState.status);\r\n//   const statusConfig = getStatusConfig();\r\n\r\n//   const getConnectionStatusConfig = () => {\r\n//     const configs = {\r\n//       connected: { \r\n//         color: 'bg-emerald-500', \r\n//         text: 'Neural Link Active', \r\n//         textColor: 'text-emerald-800',\r\n//         bgColor: 'bg-emerald-50',\r\n//         borderColor: 'border-emerald-200' \r\n//       },\r\n//       connecting: { \r\n//         color: 'bg-amber-500', \r\n//         text: 'Establishing Link...', \r\n//         textColor: 'text-amber-800',\r\n//         bgColor: 'bg-amber-50',\r\n//         borderColor: 'border-amber-200' \r\n//       },\r\n//       reconnecting: { \r\n//         color: 'bg-amber-500', \r\n//         text: 'Reconnecting Neural Link...', \r\n//         textColor: 'text-amber-800',\r\n//         bgColor: 'bg-amber-50',\r\n//         borderColor: 'border-amber-200' \r\n//       },\r\n//       disconnected: { \r\n//         color: 'bg-red-500', \r\n//         text: 'Neural Link Offline', \r\n//         textColor: 'text-red-800',\r\n//         bgColor: 'bg-red-50',\r\n//         borderColor: 'border-red-200' \r\n//       },\r\n//       error: { \r\n//         color: 'bg-red-500', \r\n//         text: 'Connection Error', \r\n//         textColor: 'text-red-800',\r\n//         bgColor: 'bg-red-50',\r\n//         borderColor: 'border-red-200' \r\n//       },\r\n//       failed: { \r\n//         color: 'bg-red-500', \r\n//         text: 'Link Failed', \r\n//         textColor: 'text-red-800',\r\n//         bgColor: 'bg-red-50',\r\n//         borderColor: 'border-red-200' \r\n//       }\r\n//     };\r\n//     return configs[connectionStatus] || configs.disconnected;\r\n//   };\r\n\r\n//   const connectionConfig = getConnectionStatusConfig();\r\n\r\n//   return (\r\n//     <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden\">\r\n//       {/* Animated Background Elements */}\r\n//       <div className=\"absolute inset-0 overflow-hidden\">\r\n//         <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob\"></div>\r\n//         <div className=\"absolute -bottom-40 -left-40 w-80 h-80 bg-cyan-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000\"></div>\r\n//         <div className=\"absolute top-40 left-1/2 w-80 h-80 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000\"></div>\r\n        \r\n//         {/* Neural Network Grid */}\r\n//         <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-cyan-500/5 to-transparent\"></div>\r\n//         <div className=\"absolute inset-0\" style={{\r\n//           backgroundImage: `radial-gradient(circle at 1px 1px, rgba(99, 102, 241, 0.1) 1px, transparent 0)`,\r\n//           backgroundSize: '20px 20px'\r\n//         }}></div>\r\n//       </div>\r\n\r\n//       <div className=\"relative z-10 max-w-7xl mx-auto p-6 space-y-8\">\r\n        \r\n//         {/* Stunning Header */}\r\n//         <motion.div \r\n//           initial={{ opacity: 0, y: -30 }}\r\n//           animate={{ opacity: 1, y: 0 }}\r\n//           transition={{ duration: 0.8, ease: \"easeOut\" }}\r\n//           className=\"text-center py-12\"\r\n//         >\r\n//           <div className=\"relative\">\r\n//             <motion.h1 \r\n//               className=\"text-7xl md:text-8xl font-black bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent mb-4 tracking-tight\"\r\n//               initial={{ scale: 0.9, opacity: 0 }}\r\n//               animate={{ scale: 1, opacity: 1 }}\r\n//               transition={{ duration: 1, ease: \"easeOut\" }}\r\n//             >\r\n//               Chimera\r\n//             </motion.h1>\r\n            \r\n//             <motion.div\r\n//               className=\"absolute -top-4 -right-4 text-4xl\"\r\n//               animate={{ \r\n//                 rotate: [0, 10, -10, 0],\r\n//                 scale: [1, 1.1, 1]\r\n//               }}\r\n//               transition={{ \r\n//                 duration: 2,\r\n//                 repeat: Infinity,\r\n//                 ease: \"easeInOut\"\r\n//               }}\r\n//             >\r\n//               ⚡\r\n//             </motion.div>\r\n//           </div>\r\n          \r\n//           <motion.div\r\n//             initial={{ opacity: 0, y: 20 }}\r\n//             animate={{ opacity: 1, y: 0 }}\r\n//             transition={{ delay: 0.5, duration: 0.6 }}\r\n//             className=\"space-y-4\"\r\n//           >\r\n//             <p className=\"text-2xl md:text-3xl text-slate-300 font-bold tracking-wide\">\r\n//               Neural Multi-Agent Debate System\r\n//             </p>\r\n//             <p className=\"text-lg text-slate-400 max-w-2xl mx-auto leading-relaxed\">\r\n//               Unleash the collective intelligence of AI experts in epic debates that reshape understanding\r\n//             </p>\r\n            \r\n//             <div className=\"flex items-center justify-center space-x-6 mt-6\">\r\n//               <div className=\"flex items-center space-x-2 text-cyan-400\">\r\n//                 <SparklesIcon className=\"h-5 w-5\" />\r\n//                 <span className=\"text-sm font-medium\">AI-Powered</span>\r\n//               </div>\r\n//               <div className=\"flex items-center space-x-2 text-purple-400\">\r\n//                 <BoltIcon className=\"h-5 w-5\" />\r\n//                 <span className=\"text-sm font-medium\">Real-Time</span>\r\n//               </div>\r\n//               <div className=\"flex items-center space-x-2 text-pink-400\">\r\n//                 <RocketLaunchIcon className=\"h-5 w-5\" />\r\n//                 <span className=\"text-sm font-medium\">Cutting-Edge</span>\r\n//               </div>\r\n//             </div>\r\n//           </motion.div>\r\n//         </motion.div>\r\n\r\n//         {/* Futuristic Query Input Section */}\r\n//         <motion.div \r\n//           initial={{ opacity: 0, y: 30 }}\r\n//           animate={{ opacity: 1, y: 0 }}\r\n//           transition={{ delay: 0.3, duration: 0.8 }}\r\n//           className=\"relative\"\r\n//         >\r\n//           <div className=\"bg-gradient-to-r from-slate-800/80 via-slate-900/90 to-slate-800/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-slate-700/50 p-8\">\r\n//             <div className=\"absolute inset-0 bg-gradient-to-r from-cyan-500/10 via-purple-500/10 to-pink-500/10 rounded-3xl blur-xl\"></div>\r\n            \r\n//             <div className=\"relative space-y-6\">\r\n//               <div className=\"flex flex-col lg:flex-row gap-4\">\r\n//                 <div className=\"flex-1 relative group\">\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     value={query}\r\n//                     onChange={(e) => setQuery(e.target.value)}\r\n//                     placeholder=\"Enter your complex question or debate topic...\"\r\n//                     className=\"w-full p-6 pl-16 bg-gradient-to-r from-slate-900/50 to-slate-800/50 border-2 border-slate-600/50 rounded-2xl focus:ring-4 focus:ring-purple-500/30 focus:border-purple-500/50 transition-all duration-300 text-white placeholder-slate-400 text-lg font-medium backdrop-blur-sm group-hover:border-slate-500/70\"\r\n//                     disabled={isDebateActive}\r\n//                     onKeyPress={(e) => e.key === 'Enter' && !isDebateActive && startDebate()}\r\n//                   />\r\n//                   <div className=\"absolute left-6 top-1/2 transform -translate-y-1/2 text-slate-400 group-hover:text-cyan-400 transition-colors duration-300\">\r\n//                     <motion.div\r\n//                       animate={{ scale: [1, 1.1, 1] }}\r\n//                       transition={{ duration: 2, repeat: Infinity, ease: \"easeInOut\" }}\r\n//                     >\r\n//                       🧠\r\n//                     </motion.div>\r\n//                   </div>\r\n//                 </div>\r\n                \r\n//                 <div className=\"flex space-x-4\">\r\n//                   <motion.button\r\n//                     whileHover={{ scale: 1.02, boxShadow: \"0 20px 40px -12px rgba(139, 92, 246, 0.3)\" }}\r\n//                     whileTap={{ scale: 0.98 }}\r\n//                     onClick={startDebate}\r\n//                     disabled={!query.trim() || !isConnected || isDebateActive}\r\n//                     className=\"px-8 py-6 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-2xl hover:from-purple-700 hover:to-pink-700 disabled:from-slate-600 disabled:to-slate-700 disabled:cursor-not-allowed transition-all duration-300 flex items-center space-x-3 font-bold text-lg shadow-xl border border-purple-500/50\"\r\n//                   >\r\n//                     {isDebateActive ? (\r\n//                       <>\r\n//                         <motion.div\r\n//                           animate={{ rotate: 360 }}\r\n//                           transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\r\n//                         >\r\n//                           <PauseIcon className=\"h-6 w-6\" />\r\n//                         </motion.div>\r\n//                         <span>Neural Active</span>\r\n//                       </>\r\n//                     ) : (\r\n//                       <>\r\n//                         <PlayIcon className=\"h-6 w-6\" />\r\n//                         <span>Ignite Debate</span>\r\n//                       </>\r\n//                     )}\r\n//                   </motion.button>\r\n                  \r\n//                   <motion.button\r\n//                     whileHover={{ scale: 1.02 }}\r\n//                     whileTap={{ scale: 0.98 }}\r\n//                     onClick={resetDebate}\r\n//                     disabled={isDebateActive}\r\n//                     className=\"px-6 py-6 bg-gradient-to-r from-slate-700 to-slate-800 text-slate-300 rounded-2xl hover:from-slate-600 hover:to-slate-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 flex items-center space-x-3 font-semibold shadow-xl border border-slate-600/50\"\r\n//                   >\r\n//                     <ArrowPathIcon className=\"h-6 w-6\" />\r\n//                     <span>Reset</span>\r\n//                   </motion.button>\r\n//                 </div>\r\n//               </div>\r\n//             </div>\r\n//           </div>\r\n//         </motion.div>\r\n\r\n//         {/* Futuristic Status Bar */}\r\n//         <motion.div \r\n//           initial={{ opacity: 0 }}\r\n//           animate={{ opacity: 1 }}\r\n//           transition={{ delay: 0.6, duration: 0.6 }}\r\n//           className=\"flex flex-col sm:flex-row items-center justify-between gap-4\"\r\n//         >\r\n//           <motion.div \r\n//             className={`inline-flex items-center px-6 py-3 rounded-2xl font-bold text-sm border-2 backdrop-blur-sm ${statusConfig.bgColor} ${statusConfig.color} ${statusConfig.borderColor} ${statusConfig.glow} shadow-xl`}\r\n//             animate={{ \r\n//               boxShadow: isDebateActive ? \r\n//                 [\"0 0 20px rgba(139, 92, 246, 0.3)\", \"0 0 40px rgba(139, 92, 246, 0.5)\", \"0 0 20px rgba(139, 92, 246, 0.3)\"] :\r\n//                 \"0 0 20px rgba(0, 0, 0, 0.1)\"\r\n//             }}\r\n//             transition={{ duration: 2, repeat: Infinity }}\r\n//           >\r\n//             <motion.span \r\n//               className=\"mr-3 text-lg\"\r\n//               animate={isDebateActive ? { \r\n//                 scale: [1, 1.2, 1],\r\n//                 rotate: [0, 5, -5, 0]\r\n//               } : {}}\r\n//               transition={{ duration: 1, repeat: Infinity }}\r\n//             >\r\n//               {statusConfig.icon}\r\n//             </motion.span>\r\n//             {statusConfig.message}\r\n//           </motion.div>\r\n          \r\n//           <motion.div \r\n//             className={`inline-flex items-center px-4 py-2 rounded-xl text-sm font-bold border-2 backdrop-blur-sm ${connectionConfig.bgColor} ${connectionConfig.textColor} ${connectionConfig.borderColor} shadow-lg`}\r\n//             animate={{ opacity: [0.8, 1, 0.8] }}\r\n//             transition={{ duration: 2, repeat: Infinity }}\r\n//           >\r\n//             <motion.div \r\n//               className={`w-3 h-3 rounded-full mr-3 ${connectionConfig.color}`}\r\n//               animate={connectionStatus === 'connecting' || connectionStatus === 'reconnecting' ? \r\n//                 { scale: [1, 1.3, 1] } : {}\r\n//               }\r\n//               transition={{ duration: 0.8, repeat: Infinity }}\r\n//             />\r\n//             {connectionConfig.text}\r\n//           </motion.div>\r\n//         </motion.div>\r\n\r\n//         {/* Research Phase */}\r\n//         <AnimatePresence>\r\n//           {(debateState.status === 'researching' || debateState.researchBrief) && (\r\n//             <ResearchPanel \r\n//               researchBrief={debateState.researchBrief} \r\n//               isLoading={debateState.status === 'researching'}\r\n//             />\r\n//           )}\r\n//         </AnimatePresence>\r\n\r\n//         {/* Judge Decisions */}\r\n//         <AnimatePresence>\r\n//           {debateState.judgeDecisions.length > 0 && (\r\n//             <JudgePanel judgeDecisions={debateState.judgeDecisions} />\r\n//           )}\r\n//         </AnimatePresence>\r\n\r\n//         {/* Expert Agents Grid */}\r\n//         <AnimatePresence>\r\n//           {(debateState.status === 'debating' || debateState.agentMessages.length > 0 || debateState.status === 'research_complete') && (\r\n//             <motion.div \r\n//               initial={{ opacity: 0, y: 30 }}\r\n//               animate={{ opacity: 1, y: 0 }}\r\n//               transition={{ delay: 0.2, duration: 0.8 }}\r\n//               className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\"\r\n//             >\r\n//               {['innovator', 'skeptic', 'engineer', 'ethicist'].map((agent, index) => (\r\n//                 <motion.div\r\n//                   key={agent}\r\n//                   initial={{ opacity: 0, y: 50, rotateX: -15 }}\r\n//                   animate={{ opacity: 1, y: 0, rotateX: 0 }}\r\n//                   transition={{ delay: 0.1 * index, duration: 0.6, type: \"spring\" }}\r\n//                 >\r\n//                   <AgentPanel\r\n//                     agent={agent}\r\n//                     messages={debateState.agentMessages}\r\n//                     currentRound={debateState.currentRound}\r\n//                     isActive={debateState.activeAgents.has(agent)}\r\n//                     debateStatus={debateState.status}\r\n//                   />\r\n//                 </motion.div>\r\n//               ))}\r\n//             </motion.div>\r\n//           )}\r\n//         </AnimatePresence>\r\n\r\n//         {/* Final Report */}\r\n//         <AnimatePresence>\r\n//           {debateState.finalReport && (\r\n//             <FinalReport report={debateState.finalReport} />\r\n//           )}\r\n//         </AnimatePresence>\r\n\r\n//         {/* Scroll marker */}\r\n//         <div ref={messagesEndRef} />\r\n\r\n//         {/* Futuristic Debug Panel */}\r\n//         {process.env.NODE_ENV === 'development' && (\r\n//           <motion.div \r\n//             initial={{ opacity: 0, y: 20 }}\r\n//             animate={{ opacity: 1, y: 0 }}\r\n//             className=\"bg-gradient-to-r from-slate-900/90 to-slate-800/90 backdrop-blur-xl text-cyan-400 p-6 rounded-2xl font-mono text-xs space-y-2 border border-slate-700/50 shadow-2xl\"\r\n//           >\r\n//             <div className=\"text-cyan-300 font-bold mb-3 flex items-center\">\r\n//               <div className=\"w-2 h-2 bg-cyan-400 rounded-full mr-2 animate-pulse\"></div>\r\n//               Neural Debug Console\r\n//             </div>\r\n//             <div className=\"grid grid-cols-2 gap-4\">\r\n//               <div>Session: <span className=\"text-purple-400\">{sessionId}</span></div>\r\n//               <div>Status: <span className=\"text-green-400\">{debateState.status}</span></div>\r\n//               <div>Messages: <span className=\"text-yellow-400\">{messages.length}</span></div>\r\n//               <div>Round: <span className=\"text-pink-400\">{debateState.currentRound}</span></div>\r\n//               <div>Connection: <span className=\"text-blue-400\">{connectionStatus}</span></div>\r\n//               <div>Agents: <span className=\"text-indigo-400\">{debateState.agentMessages.length}</span></div>\r\n//             </div>\r\n//             {debateState.startTime && (\r\n//               <div className=\"text-center pt-2 border-t border-slate-700\">\r\n//                 Duration: <span className=\"text-emerald-400 font-bold\">\r\n//                   {Math.round((new Date() - debateState.startTime) / 1000)}s\r\n//                 </span>\r\n//               </div>\r\n//             )}\r\n//           </motion.div>\r\n//         )}\r\n//       </div>\r\n\r\n//       {/* Floating Particles Effect */}\r\n//       <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\r\n//         {[...Array(20)].map((_, i) => (\r\n//           <motion.div\r\n//             key={i}\r\n//             className=\"absolute w-1 h-1 bg-cyan-400/30 rounded-full\"\r\n//             initial={{ \r\n//               x: Math.random() * window.innerWidth,\r\n//               y: window.innerHeight + 10,\r\n//               opacity: 0 \r\n//             }}\r\n//             animate={{ \r\n//               y: -10,\r\n//               opacity: [0, 1, 0],\r\n//               scale: [0, 1, 0]\r\n//             }}\r\n//             transition={{\r\n//               duration: Math.random() * 10 + 10,\r\n//               repeat: Infinity,\r\n//               delay: Math.random() * 5,\r\n//               ease: \"easeOut\"\r\n//             }}\r\n//           />\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default DebateInterface;\r\n\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}